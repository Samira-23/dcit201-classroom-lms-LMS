from abc import ABC, abstractmethod

# Abstract Vehicle Class (Abstraction)
class Vehicle(ABC):
    def __init__(self, vehicle_id, model, base_rate):
        self.__vehicle_id = vehicle_id
        self.__model = model
        self.__base_rate = base_rate
        self.__is_available = True

    @abstractmethod
    def calculate_rental_cost(self, days):
        pass

    @abstractmethod
    def is_available_for_rental(self):
        return self.__is_available

    def get_vehicle_details(self):
        return {
            "Vehicle ID": self.__vehicle_id,
            "Model": self.__model,
            "Base Rate": self.__base_rate,
            "Available": self.__is_available
        }

    def set_availability(self, status):
        if isinstance(status, bool):
            self.__is_available = status


# Inherited Classes (Inheritance)
class Car(Vehicle):
    def __init__(self, vehicle_id, model, base_rate, seating_capacity):
        super().__init__(vehicle_id, model, base_rate)
        self.__seating_capacity = seating_capacity

    def calculate_rental_cost(self, days):
        return self.get_vehicle_details()["Base Rate"] * days * 1.1  # 10% extra for maintenance

    def is_available_for_rental(self):
        return super().is_available_for_rental()


class Motorcycle(Vehicle):
    def __init__(self, vehicle_id, model, base_rate, engine_capacity):
        super().__init__(vehicle_id, model, base_rate)
        self.__engine_capacity = engine_capacity

    def calculate_rental_cost(self, days):
        return self.get_vehicle_details()["Base Rate"] * days * 0.9  # Discount for light maintenance

    def is_available_for_rental(self):
        return super().is_available_for_rental()


class Truck(Vehicle):
    def __init__(self, vehicle_id, model, base_rate, load_capacity):
        super().__init__(vehicle_id, model, base_rate)
        self.__load_capacity = load_capacity

    def calculate_rental_cost(self, days):
        return self.get_vehicle_details()["Base Rate"] * days * 1.5  # Heavy maintenance surcharge

    def is_available_for_rental(self):
        return super().is_available_for_rental()


# Interface and Polymorphism
class Rentable:
    def rent(self, customer, days):
        pass

    def return_vehicle(self):
        pass


class RentalCar(Car, Rentable):
    def rent(self, customer, days):
        if self.is_available_for_rental():
            self.set_availability(False)
            return self.calculate_rental_cost(days)
        return "Car not available"

    def return_vehicle(self):
        self.set_availability(True)


class RentalMotorcycle(Motorcycle, Rentable):
    def rent(self, customer, days):
        if self.is_available_for_rental():
            self.set_availability(False)
            return self.calculate_rental_cost(days)
        return "Motorcycle not available"

    def return_vehicle(self):
        self.set_availability(True)


class RentalTruck(Truck, Rentable):
    def rent(self, customer, days):
        if self.is_available_for_rental():
            self.set_availability(False)
            return self.calculate_rental_cost(days)
        return "Truck not available"

    def return_vehicle(self):
        self.set_availability(True)


# Supporting Classes (Composition)
class Customer:
    def __init__(self, customer_id, name):
        self.customer_id = customer_id
        self.name = name


class RentalTransaction:
    def __init__(self, customer, vehicle, days):
        self.customer = customer
        self.vehicle = vehicle
        self.days = days
        self.cost = vehicle.calculate_rental_cost(days)


class RentalAgency:
    def __init__(self, name):
        self.name = name
        self.__vehicles = []
        self.__transactions = []

    def add_vehicle(self, vehicle):
        self.__vehicles.append(vehicle)

    def list_vehicles(self):
        return [vehicle.get_vehicle_details() for vehicle in self.__vehicles]

    def rent_vehicle(self, customer, vehicle_id, days):
        for vehicle in self.__vehicles:
            if vehicle.get_vehicle_details()["Vehicle ID"] == vehicle_id:
                if vehicle.is_available_for_rental():
                    transaction = RentalTransaction(customer, vehicle, days)
                    self.__transactions.append(transaction)
                    vehicle.set_availability(False)
                    return transaction.cost
                else:
                    return "Vehicle not available"
        return "Vehicle not found"

    def return_vehicle(self, vehicle_id):
        for vehicle in self.__vehicles:
            if vehicle.get_vehicle_details()["Vehicle ID"] == vehicle_id:
                vehicle.set_availability(True)
                return "Vehicle returned successfully"
        return "Vehicle not found"


# Example Usage
if __name__ == "__main__":
    # Creating the rental agency and adding vehicles
    agency = RentalAgency("Elite Rentals")

    car1 = RentalCar("C123", "Toyota Corolla", 50, 5)
    motorcycle1 = RentalMotorcycle("M456", "Yamaha MT", 20, 500)
    truck1 = RentalTruck("T789", "Ford F150", 100, 2000)

    agency.add_vehicle(car1)
    agency.add_vehicle(motorcycle1)
    agency.add_vehicle(truck1)

    # Customer renting a vehicle
    customer1 = Customer("CU001", "John Doe")
    rental_cost = agency.rent_vehicle(customer1, "C123", 3)
    print(f"Rental cost for John Doe: {rental_cost}")

    # Listing available vehicles
    print("\nAvailable vehicles:")
    for vehicle in agency.list_vehicles():
        print(vehicle)

    # Returning a vehicle
    agency.return_vehicle("C123")
    print("\nVehicle returned. Updated list:")
    for vehicle in agency.list_vehicles():
        print(vehicle)
